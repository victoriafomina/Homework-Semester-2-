1) Реализовать функции Map, Filter и Fold:
Map принимает список и функцию, преобразующую элемент списка. Возвращаться должен список, 
полученный применением переданной функции к каждому элементу переданного списка. 
Например, Map(new List<int>() {1, 2, 3}, x => x * 2) должен возвращать список [2; 4; 6].
Filter принимает список и функцию, возвращающую булевое значение по элементу списка. 
Возвращаться должен список, составленный из тех элементов переданного списка, 
для которых переданная функция вернула true.
Fold принимает список, начальное значение и функцию, которая берёт текущее накопленное 
значение и текущий элемент списка, и возвращает следующее накопленное значение. 
Сама Fold возвращает накопленное значение, получившееся после всего прохода списка. 
Например, Fold(new List<int>() {1, 2, 3}, 1, (acc, elem) => acc * elem) работала бы так: 
сначала в acc клался бы 1, потом умножался бы на 1, потом результат (1) умножался бы на 2, 
потом результат (2) умножался бы на 3, потом результат (6) возвращался бы в качестве ответа


2) На базе класса, генерирующего события по нажатию на клавиши управления курсором (EventLoop с пары), 
реализовать консольное приложение, позволяющее управлять персонажем, перемещающимся по карте. 
Карта состоит из свободного пространства и стен, и должна грузиться из файла. 
Приложение должно отображать карту и персонажа (символом @) в окне консоли, и позволять 
персонажу перемещаться по карте, реагируя на клавиши управления курсором. 
Будут полезны свойства Console.CursorLeft и Console.CursorTop.